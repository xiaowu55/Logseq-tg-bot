from typing import List
from telegram.ext import Application
from loguru import logger

from ..config.settings import settings
from .github import GitHubService
from .age import AgeService


class SchedulerService:
    """定时任务服务"""

    @staticmethod
    async def setup_jobs(app: Application, authorized_ids: List[int]) -> None:
        """设置定时任务"""
        if not app:
            raise RuntimeError("Application not initialized")

        # 设置定期同步任务
        app.job_queue.run_repeating(
            SchedulerService._scheduled_housekeeping,
            interval=settings.GITHUB_UPDATE_FREQUENCY,
            first=10,
            data=authorized_ids[0],  # 传递第一个授权ID作为context
        )

    @staticmethod
    async def _scheduled_housekeeping(context) -> None:
        """定期维护任务"""
        logger.info("执行定期维护...")

        try:
            # 检查是否需要生成age密钥文件
            if settings.GRAPH_AGE_ENCRYPTED:
                await AgeService.generate_key_file()

            # 同步Git仓库
            github_service = GitHubService()
            await github_service.sync_to_json()

            # 更新日历文件
            if settings.CALENDARS_AUTOGENERATED:
                await github_service.update_calendars_file()

        except Exception as e:
            logger.error(f"定期维护任务失败: {e}")
